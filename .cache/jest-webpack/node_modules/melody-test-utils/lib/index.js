module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
  "a5a18958983c74ec0d25bcd98d62e34ca8553a19": function() {return __webpack_require__('4');}
};


/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = require("./../../melody-idom/lib/index.js")["82375eb0d396a78053cc0b40a01424ff9c4be1cf"]();

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = require("./../../melody-snapshot-serializer/lib/index.js")["d221778e085e6da36fa863e5a234bcffa5ca4e6d"]();

/***/ }),
/* 3 */
/***/ (function(module, exports) {

module.exports = require("./../node_modules/pretty-format/build-es5/index.js")["185c78d090f6723a9a53a6b826b57281e362a27e"]();

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault(ex) {
    return ex && (typeof ex === 'undefined' ? 'undefined' : _typeof(ex)) === 'object' && 'default' in ex ? ex['default'] : ex;
}

var melodyIdom = __webpack_require__(1);
var melodySnapshotSerializer = __webpack_require__(2);
var prettyFormat = _interopDefault(__webpack_require__(3));

var classCallCheck = function classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
};

var createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }

    return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();

var inherits = function inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
        }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var possibleConstructorReturn = function possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
};

var flatten = function flatten(nestedArray) {
    return nestedArray.reduce(function (acc, cur) {
        return acc.concat(cur);
    }, []);
};
var map = function map(transform) {
    return function (data) {
        return data.map(transform);
    };
};
var flatMap = function flatMap(transform) {
    return function (data) {
        return flatten(map(transform)(data));
    };
};
var maybeUnwrap = function maybeUnwrap(data) {
    return data.length === 1 ? data[0] : data;
};

var selectNodes = function selectNodes(predicate) {
    return function (el) {
        var walker = document.createTreeWalker(el);
        var matches = [];
        while (walker.nextNode()) {
            if (predicate(walker.currentNode)) {
                matches.push(walker.currentNode);
            }
        }
        return matches;
    };
};

var drainQueue = function drainQueue() {
    return melodyIdom.flush({
        didTimeout: false,
        timeRemaining: function timeRemaining() {
            return 10;
        }
    });
};

var hasComponentOfType = function hasComponentOfType(Type) {
    return function (node) {
        var inst = melodyIdom.getNodeData(node).componentInstance;
        return !!inst && inst instanceof Type;
    };
};

var assertNotEmpty = function assertNotEmpty(selector, component) {
    if (component.elements.length === 0) {
        throw new Error('Couldn\'t find component with selector: ' + selector);
    }
    return component;
};
var exists = function exists(x) {
    return !!x;
};

var compose = function compose(f, g) {
    return function (x) {
        return f(g(x));
    };
};

var getComponentAt = function getComponentAt(node) {
    return melodyIdom.getNodeData(node).componentInstance;
};

var shallowRenderComponent = function shallowRenderComponent(comp) {
    melodyIdom.setCurrentComponent(comp);
    melodyIdom.patchOuter(comp.el, comp.render.bind(comp), {});
    melodyIdom.clearQueue();
};

var dispatchTo = function dispatchTo(action) {
    return function (comp) {
        if (comp && comp.dispatch) {
            comp.dispatch(action);
            shallowRenderComponent(comp);
        }
    };
};

var getComponentProps = compose(function (comp) {
    return comp && comp.props;
}, getComponentAt);

var getProp = function getProp(key) {
    return compose(function (props) {
        return props[key];
    }, getComponentProps);
};

var getComponentState = compose(function (comp) {
    return comp && comp.getState && comp.getState();
}, getComponentAt);

var Wrapper = function () {
    function Wrapper(rootElement) {
        classCallCheck(this, Wrapper);

        this.elements = [].concat(rootElement);
    }

    Wrapper.prototype.empty = function empty() {
        return this.elements.length === 0;
    };

    Wrapper.prototype.tap = function tap(callback) {
        callback(this);
        return this;
    };

    Wrapper.prototype.map = function map(transform) {
        return this.lift(this.elements.map(transform));
    };

    Wrapper.prototype.reduce = function reduce(reducer, initial) {
        return this.elements.reduce(reducer, initial);
    };

    Wrapper.prototype.forEach = function forEach(callback) {
        this.elements.forEach(callback);
        return this;
    };

    Wrapper.prototype.filter = function filter(selector) {
        return this.filterWhere(function (x) {
            return x.is(selector);
        });
    };

    Wrapper.prototype.filterWhere = function filterWhere(predicate) {
        return this.lift(this.elements.map(this.lift).filter(predicate).reduce(function (acc, wrapper) {
            return acc.concat(wrapper);
        }, this.lift([])));
    };

    Wrapper.prototype.concat = function concat(other) {
        return this.lift(this.elements.concat(other.elements));
    };

    Wrapper.prototype.chain = function chain(transform) {
        return this.lift(flatMap(transform)(this.elements));
    };

    Wrapper.prototype.props = function props() {
        return maybeUnwrap(this.elements.map(getComponentProps).filter(exists));
    };

    Wrapper.prototype.prop = function prop(key) {
        return maybeUnwrap(this.elements.map(getProp(key)).filter(exists));
    };

    Wrapper.prototype.state = function state() {
        return maybeUnwrap(this.elements.map(getComponentState).filter(exists));
    };

    Wrapper.prototype.first = function first() {
        return this.at(0);
    };

    Wrapper.prototype.last = function last() {
        return this.at(this.length - 1);
    };

    Wrapper.prototype.at = function at(index) {
        return this.lift(this.elements[index]);
    };

    Wrapper.prototype.get = function get$$1(index) {
        return this.elements[index];
    };

    Wrapper.prototype.dispatch = function dispatch(action) {
        this.elements.forEach(compose(dispatchTo(action), getComponentAt));
        return this;
    };

    Wrapper.prototype.shallow = function shallow() {
        var forceRender = function forceRender(comp) {
            if (comp) {
                shallowRenderComponent(comp);
            }
        };
        this.elements.forEach(compose(forceRender, getComponentAt));
        return this;
    };

    Wrapper.prototype.render = function render() {
        var forceRender = function forceRender(comp) {
            if (comp) {
                melodyIdom.setCurrentComponent(comp);
                melodyIdom.patchOuter(comp.el, comp.render.bind(comp), {});
            }
        };
        this.elements.forEach(compose(forceRender, getComponentAt));
        drainQueue();
        return this;
    };

    Wrapper.prototype.setProps = function setProps(props) {
        var setProps = function setProps(comp) {
            if (comp && comp.apply) {
                comp.apply(props);
                shallowRenderComponent(comp);
            }
        };
        this.elements.forEach(compose(setProps, getComponentAt));
        return this;
    };

    Wrapper.prototype.find = function find(selector) {
        if (typeof selector === 'string') {
            return assertNotEmpty(selector, this.chain(function (el) {
                return Array.from(el.querySelectorAll(selector));
            }));
        } else if (typeof selector === 'function') {
            return assertNotEmpty(selector.prototype.displayName, this.chain(selectNodes(hasComponentOfType(selector))));
        } else {
            throw new Error('Your selector is invalid: ' + selector + ' \n Make sure you give CSS selector or Component as selector');
        }
    };

    Wrapper.prototype.findWhere = function findWhere(predicate) {
        return this.chain(selectNodes(compose(predicate, this.lift)));
    };

    Wrapper.prototype.is = function is(selector) {
        var test = typeof selector === 'string' ? function (el) {
            return el.matches(selector);
        } : hasComponentOfType(selector);
        return this.length === 0 ? false : this.reduce(function (acc, el) {
            return acc && test(el);
        }, true);
    };

    Wrapper.prototype.hasClass = function hasClass(className) {
        return this.length === 0 ? false : this.reduce(function (acc, el) {
            return acc && el.classList.contains(className);
        }, true);
    };

    Wrapper.prototype.html = function html() {
        return this.reduce(function (acc, el) {
            return acc + el.outerHTML;
        }, '');
    };

    Wrapper.prototype.text = function text() {
        return this.reduce(function (acc, el) {
            return acc + el.textContent;
        }, '');
    };

    Wrapper.prototype.simulate = function simulate(type) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { bubbles: true };

        var event = new Event(type, options);
        this.forEach(function (el) {
            return el.dispatchEvent(event);
        });
        drainQueue();
        return this;
    };

    Wrapper.prototype.debug = function debug() {
        return prettyFormat(this, {
            escapeRegex: true,
            plugins: [{ test: melodySnapshotSerializer.test, print: melodySnapshotSerializer.print }, prettyFormat.plugins.DOMElement],
            printFunctionName: false
        });
    };

    // abstract lift(elements): Wrapper;


    createClass(Wrapper, [{
        key: 'isMelodyWrapper',
        get: function get$$1() {
            return true;
        }
    }, {
        key: 'length',
        get: function get$$1() {
            return this.elements.length;
        }
    }]);
    return Wrapper;
}();

var FullWrapper = function (_Wrapper) {
    inherits(FullWrapper, _Wrapper);

    function FullWrapper(rootElement) {
        classCallCheck(this, FullWrapper);
        return possibleConstructorReturn(this, _Wrapper.call(this, rootElement));
    }

    FullWrapper.prototype.setProps = function setProps(props) {
        var setProps = function setProps(comp) {
            if (comp && comp.apply) {
                comp.apply(props);
                melodyIdom.patchOuter(comp.el, comp.render.bind(comp), {});
            }
        };
        this.elements.forEach(compose(setProps, getComponentAt));
        drainQueue();
        return this;
    };

    FullWrapper.prototype.lift = function lift(rootElement) {
        return new FullWrapper(rootElement);
    };

    FullWrapper.empty = function empty() {
        return new FullWrapper([]);
    };

    return FullWrapper;
}(Wrapper);

var ShallowWrapper = function (_Wrapper2) {
    inherits(ShallowWrapper, _Wrapper2);

    function ShallowWrapper(rootElement) {
        classCallCheck(this, ShallowWrapper);
        return possibleConstructorReturn(this, _Wrapper2.call(this, rootElement));
    }

    ShallowWrapper.prototype.setProps = function setProps(props) {
        var setProps = function setProps(comp) {
            if (comp && comp.apply) {
                comp.apply(props);
                shallowRenderComponent(comp);
            }
        };
        this.elements.forEach(compose(setProps, getComponentAt));
        return this;
    };

    ShallowWrapper.prototype.lift = function lift(rootElement) {
        return new ShallowWrapper(rootElement);
    };

    ShallowWrapper.empty = function empty() {
        return new ShallowWrapper([]);
    };

    return ShallowWrapper;
}(Wrapper);

function render(Component) {
    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var el = document.createElement('div');
    melodyIdom.patchInner(el, function () {
        return melodyIdom.component(Component, 'key', props);
    }, {});
    drainQueue();
    return new FullWrapper(el.firstChild);
}

function shallow(Component) {
    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var el = document.createElement('div');
    melodyIdom.getNodeData(el).key = Symbol();
    melodyIdom.patchInner(el, function () {
        return melodyIdom.component(Component, 'key', props);
    }, {});
    var comp = getComponentAt(el.firstElementChild);
    shallowRenderComponent(comp);

    comp.el = el.firstElementChild;
    melodyIdom.getNodeData(comp.el).componentInstance = comp;

    return new ShallowWrapper(comp.el);
}

exports.getComponentAt = getComponentAt;
exports.Wrapper = Wrapper;
exports.FullWrapper = FullWrapper;
exports.ShallowWrapper = ShallowWrapper;
exports.render = render;
exports.shallow = shallow;

/***/ })
/******/ ]);